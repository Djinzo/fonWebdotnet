[{"C:\\Users\\jinzo\\WebstormProjects\\webappfront\\src\\index.js":"1","C:\\Users\\jinzo\\WebstormProjects\\webappfront\\src\\reportWebVitals.js":"2","C:\\Users\\jinzo\\WebstormProjects\\webappfront\\src\\App.js":"3","C:\\Users\\jinzo\\WebstormProjects\\webappfront\\src\\Compenents\\navbar.js":"4","C:\\Users\\jinzo\\WebstormProjects\\webappfront\\src\\Pages\\client.js":"5","C:\\Users\\jinzo\\WebstormProjects\\webappfront\\src\\Connexion\\store.js":"6","C:\\Users\\jinzo\\WebstormProjects\\webappfront\\src\\Pages\\produit.js":"7"},{"size":500,"mtime":1611505866442,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":928,"mtime":1611520462881,"results":"11","hashOfConfig":"9"},{"size":1196,"mtime":1611520619380,"results":"12","hashOfConfig":"9"},{"size":3971,"mtime":1611519616480,"results":"13","hashOfConfig":"9"},{"size":1161,"mtime":1611524943445,"results":"14","hashOfConfig":"9"},{"size":4440,"mtime":1611525044104,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"13ln7ii",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"C:\\Users\\jinzo\\WebstormProjects\\webappfront\\src\\index.js",[],["34","35"],"C:\\Users\\jinzo\\WebstormProjects\\webappfront\\src\\reportWebVitals.js",[],"C:\\Users\\jinzo\\WebstormProjects\\webappfront\\src\\App.js",[],"C:\\Users\\jinzo\\WebstormProjects\\webappfront\\src\\Compenents\\navbar.js",["36"],"import {Component} from \"react\";\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nclass Navbar extends Component {\r\n    state = {};\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-secondary\">\r\n                <a className=\"navbar-brand\" href=\"#\">MyApp</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                        data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\"\r\n                        aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                    <div className=\"navbar-nav\">\r\n                        <Link className=\"nav-item nav-link active\" to=\"/\">Home</Link>\r\n                        <Link className=\"nav-item nav-link\" to=\"/produit\">Produit</Link>\r\n                        <Link className=\"nav-item nav-link\" to=\"/client\">Client</Link>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Navbar;\r\n\r\n","C:\\Users\\jinzo\\WebstormProjects\\webappfront\\src\\Pages\\client.js",["37","38","39","40","41"],"import {Component} from \"react\";\r\nimport Store from \"../Connexion/store\";\r\n\r\n\r\nexport default class Client extends Component {\r\n    state = {\r\n        clients: [],\r\n        values: {\r\n            nom: '',\r\n            prenom: '',\r\n            email: ''\r\n        },\r\n        pages: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadClients();\r\n        Store.getPageNumber().then(data => {\r\n            console.log(data);\r\n            this.setState({pages: data.data})\r\n            console.log(this.state);\r\n        }).catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <h1>add Client</h1>\r\n            <form>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"nameInput\" className=\"form-label\">Nom</label>\r\n                    <input type=\"text\" className=\"form-control\" id=\"nameInput\"\r\n                           onChange={(e) => {\r\n                               this.state.values.nom = e.target.value;\r\n                           }} placeholder=\"jhone\"/>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"prenomInput\" className=\"form-label\">prenom </label>\r\n                    <input type=\"text\" onChange={(e) => {\r\n                        this.state.values.prenom = e.target.value;\r\n                    }}\r\n                           className=\"form-control\" id=\"prenomInput\" placeholder=\"dow\"/>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"emailInput\" className=\"form-label\">Example textarea</label>\r\n                    <input type=\"email\" onChange={(e) => {\r\n                        this.state.values.email = e.target.value;\r\n                    }}\r\n                           placeholder=\"email@email.skm\" className=\"form-control\" id=\"emailInput\"/>\r\n                </div>\r\n                <button className=\"btn btn-success\" onClick={(e) => this.sandData()}>add</button>\r\n            </form>\r\n            <h1>Clients List</h1>\r\n            <table className=\"table table-hover table-bordered\">\r\n                <thead>\r\n                <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">Nom</th>\r\n                    <th scope=\"col\">Prenom</th>\r\n                    <th scope=\"col\">Email</th>\r\n                    <th scope=\"col\">Options</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {this.state.clients.map(c => <tr>\r\n                    <th>{c.id}</th>\r\n                    <td>{c.nom}</td>\r\n                    <td>{c.prenom}</td>\r\n                    <td>{c.email}</td>\r\n                    <td><a class=\"btn btn-danger\" onClick={(e) => {\r\n                        this.deleteClient(c.id)\r\n                    }}>delete</a></td>\r\n                </tr>)}\r\n                </tbody>\r\n            </table>\r\n            <nav aria-label=\"...\">\r\n                <ul className=\"pagination pagination-lg\">\r\n                    {this.state.pages.forEach(n => {\r\n                        <li className=\"page-item\" id={n}>\r\n                            <a className=\"page-link\" onClick={(e) => this.loadClients()}>{n}</a>\r\n                        </li>\r\n                    })}\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    }\r\n\r\n    loadClients = () => {\r\n        Store.getClients().then(data => {\r\n            this.setState({clients: data.data});\r\n            console.log(data);\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    deleteClient = (id) => {\r\n        Store.deleteClients(id).then(data => {\r\n            window.location.reload();\r\n        }).catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    sandData() {\r\n        Store.addClient(this.state.values).then(data => {\r\n            this.state.clients.push(data.data);\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n}\r\n","C:\\Users\\jinzo\\WebstormProjects\\webappfront\\src\\Connexion\\store.js",[],"C:\\Users\\jinzo\\WebstormProjects\\webappfront\\src\\Pages\\produit.js",["42","43","44","45"],"import {Component} from \"react\";\r\n\r\nimport Store from \"../Connexion/store\";\r\n\r\n\r\nexport default class Produit extends Component {\r\n    state = {\r\n        produit: [],\r\n        categoris: [],\r\n        values: {\r\n            label: '',\r\n            prix: 0.0,\r\n            categorieId: 0\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.loadCategorise();\r\n        this.loadProduit();\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (<div>\r\n\r\n            <h1>add produit</h1>\r\n            <form>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"nameInput\" className=\"form-label\">Nom de produit</label>\r\n                    <input type=\"text\" className=\"form-control\" id=\"nameInput\"\r\n                           onChange={(e) => {\r\n                               this.state.values.label = e.target.value;\r\n                           }} placeholder=\"label\"/>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"prenomInput\" className=\"form-label\">prix </label>\r\n                    <input type=\"text\" onChange={(e) => {\r\n                        this.state.values.prix = e.target.value;\r\n                    }}\r\n                           className=\"form-control\" id=\"prenomInput\" placeholder=\"dow\"/>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-10\">\r\n                            <label htmlFor=\"emailInput\" className=\"form-label\">Catigorie</label>\r\n                            <select class=\"custom-select\" aria-label=\"Default select example\" id=\"emailInput\"\r\n                                    onChange={(e) => {\r\n                                        this.state.values.categorieId = e.target.value\r\n                                        console.log(this.state);\r\n                                    }}>\r\n                                <option selected>chouse one</option>\r\n                                {this.state.categoris.map(c =>\r\n                                    <option value={c.categorieId}>{c.catName}</option>\r\n                                )}\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"col-2 mt-4\">\r\n                            <button className=\"btn btn-success\" >add categorie</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button className=\"btn btn-success\" onClick={(e) => this.sandproduit()}>add</button>\r\n            </form>\r\n            <h1>produit List</h1>\r\n            <table className=\"table table-hover table-bordered\">\r\n                <thead>\r\n                <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">Label</th>\r\n                    <th scope=\"col\">Prix</th>\r\n                    <th scope=\"col\">categorie</th>\r\n                    <th scope=\"col\">Options</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {this.state.produit.map(c => <tr>\r\n                    <th>{c.produitId}</th>\r\n                    <td>{c.label}</td>\r\n                    <td>{c.prix}</td>\r\n                    <td>{c.categorie.catName}</td>\r\n                    <td><a className=\"btn btn-danger\" onClick={(e) => {\r\n                        this.deleteProdect(c.produitId)\r\n                    }}>delete</a></td>\r\n                </tr>)}\r\n                </tbody>\r\n            </table>\r\n        </div>);\r\n    }\r\n\r\n\r\n    loadProduit() {\r\n        Store.getProduits().then(data => {\r\n            this.setState({produit: data.data});\r\n            console.log(data);\r\n        }).catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    loadCategorise() {\r\n        Store.getCatigorise().then(data => {\r\n            this.setState({categoris: data.data});\r\n            console.log(data);\r\n        }).catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    sandproduit() {\r\n        return Store.addProduit(this.state.values).then(data => {\r\n            this.state.produit.push(data.data);\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    deleteProdect(id) {\r\n        Store.deletProduit(id).then(data=>{\r\n            console.log(data.data);\r\n            window.location.reload();\r\n        }).catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n}\r\n",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":12,"column":17,"nodeType":"52","endLine":12,"endColumn":54},{"ruleId":"53","severity":1,"message":"54","line":35,"column":32,"nodeType":"55","endLine":35,"endColumn":49},{"ruleId":"53","severity":1,"message":"54","line":41,"column":25,"nodeType":"55","endLine":41,"endColumn":42},{"ruleId":"53","severity":1,"message":"54","line":48,"column":25,"nodeType":"55","endLine":48,"endColumn":42},{"ruleId":"50","severity":1,"message":"56","line":71,"column":25,"nodeType":"52","endLine":73,"endColumn":24},{"ruleId":"50","severity":1,"message":"56","line":81,"column":29,"nodeType":"52","endLine":81,"endColumn":90},{"ruleId":"53","severity":1,"message":"54","line":34,"column":32,"nodeType":"55","endLine":34,"endColumn":49},{"ruleId":"53","severity":1,"message":"54","line":40,"column":25,"nodeType":"55","endLine":40,"endColumn":42},{"ruleId":"53","severity":1,"message":"54","line":50,"column":41,"nodeType":"55","endLine":50,"endColumn":58},{"ruleId":"50","severity":1,"message":"56","line":83,"column":25,"nodeType":"52","endLine":85,"endColumn":24},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]